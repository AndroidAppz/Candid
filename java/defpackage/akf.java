package defpackage;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.telephony.TelephonyManager;
import android.util.Base64;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ListView;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.json.JSONArray;
import org.json.JSONObject;

/* compiled from: CountryPicker */
public class akf extends DialogFragment implements Comparator<akh> {
    private EditText a;
    private ListView b;
    private ake c;
    private List<akh> d;
    private List<akh> e;
    private akg f;
    private Context g;

    public /* synthetic */ int compare(Object obj, Object obj2) {
        return a((akh) obj, (akh) obj2);
    }

    public void a(akg listener) {
        this.f = listener;
    }

    private List<akh> a() {
        if (this.d == null) {
            try {
                this.d = new ArrayList();
                JSONArray countryArray = new JSONArray(akf.b());
                for (int i = 0; i < countryArray.length(); i++) {
                    JSONObject jsonObject = countryArray.getJSONObject(i);
                    String countryName = jsonObject.getString("name");
                    String countryDialCode = jsonObject.getString("dial_code");
                    String countryCode = jsonObject.getString("code");
                    akh country = new akh();
                    country.b(countryCode);
                    country.c(countryName);
                    country.a(countryDialCode);
                    this.d.add(country);
                }
                Collections.sort(this.d, this);
                this.e = new ArrayList();
                this.e.addAll(this.d);
                return this.d;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    private static String b() throws IOException {
        return new String(Base64.decode("", 0), "UTF-8");
    }

    public static akf a(String dialogTitle) {
        akf picker = new akf();
        Bundle bundle = new Bundle();
        bundle.putString("dialogTitle", dialogTitle);
        picker.setArguments(bundle);
        return picker;
    }

    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(akd$d.country_picker, null);
        Bundle args = getArguments();
        if (args != null) {
            getDialog().setTitle(args.getString("dialogTitle"));
            getDialog().getWindow().setLayout(getResources().getDimensionPixelSize(akd$a.cp_dialog_width), getResources().getDimensionPixelSize(akd$a.cp_dialog_height));
        }
        a();
        this.a = (EditText) view.findViewById(akd$c.country_code_picker_search);
        this.b = (ListView) view.findViewById(akd$c.country_code_picker_listview);
        this.c = new ake(getActivity(), this.e);
        this.b.setAdapter(this.c);
        this.b.setOnItemClickListener(new akf$1(this));
        this.a.addTextChangedListener(new akf$2(this));
        return view;
    }

    @SuppressLint({"DefaultLocale"})
    private void b(String text) {
        this.e.clear();
        for (akh country : this.d) {
            if (country.c().toLowerCase(Locale.ENGLISH).contains(text.toLowerCase())) {
                this.e.add(country);
            }
        }
        this.c.notifyDataSetChanged();
    }

    public int a(akh lhs, akh rhs) {
        return lhs.c().compareTo(rhs.c());
    }

    public akh a(Context context) {
        this.g = context;
        a();
        TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService("phone");
        if (telephonyManager.getSimState() != 1) {
            String countryIsoCode = telephonyManager.getSimCountryIso();
            for (int i = 0; i < this.d.size(); i++) {
                akh country = (akh) this.d.get(i);
                if (country.b().equalsIgnoreCase(countryIsoCode)) {
                    country.a(c(country.b()));
                    return country;
                }
            }
        }
        return c();
    }

    private akh c() {
        akh country = new akh();
        country.b("AF");
        country.c("Afghanistan");
        country.a("93");
        country.a(akd$b.flag_af);
        return country;
    }

    private int c(String drawable) {
        try {
            return this.g.getResources().getIdentifier("flag_" + drawable.toLowerCase(Locale.ENGLISH), "drawable", this.g.getPackageName());
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
}
